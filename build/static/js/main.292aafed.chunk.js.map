{"version":3,"sources":["components/Header/Header.js","utils/types.js","components/Card/Card.js","components/Column/Column.js","components/Board/Board.js","components/App/App.js","database/database.js","database/modules/board/queries.js","database/modules/column/queries.js","utils/helper.js","index.js","models/board.js","models/column.js","setup/DBConfig.js"],"names":["Header","className","React","Component","Types","cardSource","beginDrag","props","cardId","id","endDrag","monitor","component","didDrop","alert","Card","state","this","isDragging","connectDragSource","connectDragPreview","DragPreviewImage","src","connect","classNames","DragSource","canDrag","dragSource","dragPreview","Column","highlighted","hovered","connectDropTarget","isOver","DropTarget","dropTarget","Board","App","DndProvider","backend","HTML5Backend","config","require","Database","request","indexedDB","open","databaseName","databaseVersion","onupgradeneeded","event","console","log","instance","target","result","createObjectStore","stores","BOARDS","keyPath","COLUMNS","CARDS","onsuccess","onerror","JSON","stringify","database","update","store","board","onSuccess","onError","res","put","undefined","addColumn","boardId","columnId","position","transaction","objectStore","get","columns","splice","hashCode","str","hash","length","i","charCodeAt","toString","Date","getTime","window","title","createdAt","updatedAt","column","cards","boardInsert","add","boardGetAll","getAll","boardRemove","delete","boardUpdateTitle","boardAddColumn","boardRemoveColumn","columnInsert","addColumnToBoard","columnGetAll","getOneBoard","columnIds","Object","Keys","openCursor","cursor","value","continue","db","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.292aafed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header className=\"Header\">\r\n        <h1>WELCOME TO KANBAN KITCHEN!</h1>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","export const Types = {\n  BOARD: 'board',\n  COLUMN: 'column',\n  CARD: 'card',\n}","import React from 'react';\nimport './Card.css';\nimport { DragSource, DragPreviewImage } from 'react-dnd';\nimport { Types } from '../../utils/types';\nimport classNames from 'classnames';\n\n// A collection of all the functions the draggable item holds\nconst cardSource = {\n  beginDrag(props) {\n    // Return the data describing the dragged item\n    const item = { cardId: props.id }\n    return item\n  },\n\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    alert('Card has been dropped!');\n  }\n}\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    canDrag: monitor.canDrag(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging(),\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview()\n  }\n}\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { id, isDragging, connectDragSource, connectDragPreview } = this.props;\n\n    return connectDragSource(\n      <div>\n        <DragPreviewImage src='../../public/favicon.ico' connect={connectDragPreview}/>\n        <div className={classNames({\n          'Card': true,\n          'Card-is-dragging': isDragging,\n        })}>\n          <h1>Title</h1>\n          <p>My draggable card id is: {id}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DragSource(Types.CARD, cardSource, collect)(Card);\n","import React from 'react';\nimport Card from '../Card/Card';\nimport './Column.css';\nimport { DropTarget, DragSource } from 'react-dnd';\nimport flow from 'lodash/flow';\nimport { Types } from '../../utils/types'\nimport classNames from 'classnames';\n\nconst columnSource = {\n  beginDrag(props) {\n    // Return the data describing the dragged item\n    const item = { columnId: props.id }\n    return item\n  }\n}\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect, monitor) {\n  return {\n    isOver: monitor.isOver(),\n    connectDropTarget: connect.dropTarget()\n  }\n}\n\nclass Column extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  \n  \n  render() {\n    const {  highlighted, hovered, connectDropTarget, isOver } = this.props;\n    return connectDropTarget(\n      <div className={classNames({\n        'Column': true,\n        'Column-highlighted': highlighted,\n        'Column-hovered': hovered,\n        'Column-is-over': isOver\n      })}>\n        <Card \n          id={1}\n          isDragging={false}\n        />\n        <Card \n          id={2}\n          canDrag={true}\n          isDragging={false}\n        />\n        <Card \n          id={3}\n          canDrag={true}\n          isDragging={false}\n        />\n      </div>\n    )\n  }\n}\n\nexport default DropTarget(Types.CARD, {}, collect)(Column)\n","import React from 'react';\nimport Column from '../Column/Column';\nimport './Board.css';\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <div className=\"Board\">\n        <ul className=\"scroll\">\n          <li>\n            <Column />\n          </li>\n          <li>\n            <Column />\n          </li>\n          <li>\n            <Column />\n          </li>\n          <li>\n            <Column />\n          </li>\n          <li>\n            <Column />\n          </li>\n          <li>\n            <Column />\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Header from '../Header/Header';\nimport Board from '../Board/Board';\nimport './App.css';\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <DndProvider backend={HTML5Backend}>\n          <Board />\n        </DndProvider>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const { config } = require(\"../setup/DBConfig\");\r\n\r\nexport default class Database {\r\n    constructor(){\r\n        const request  = indexedDB.open(config.databaseName, config.databaseVersion);\r\n\r\n        request.onupgradeneeded = (event) => {\r\n            console.log(\"Database onupgradeneeded!\")\r\n\r\n            //  Get db instance\r\n            this.instance = event.target.result;\r\n\r\n            // Create Store\r\n            this.instance.createObjectStore(config.stores.BOARDS, { keyPath: \"id\" });\r\n            this.instance.createObjectStore(config.stores.COLUMNS, { keyPath: \"id\" });\r\n            this.instance.createObjectStore(config.stores.CARDS, { keyPath: \"id\" });\r\n        }\r\n\r\n        request.onsuccess =  (event) => {\r\n            console.log(\"Database onsuccess!\")\r\n\r\n            //get db instance\r\n            this.instance = event.target.result;\r\n        }\r\n\r\n        request.onerror = (event) => {\r\n            console.log(\"Database onerror: \" + JSON.stringify(event));\r\n        }\r\n    }\r\n\r\n}\r\n","import { config } from '../../../setup/DBConfig';\r\nimport Database from '../../database';\r\n\r\nconst database = new Database();\r\n\r\n// Insert new board\r\nexport const insert = (board, onSuccess, onError) => {\r\n   const res =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS)\r\n    .add(board);\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Get one board\r\nexport const getOne = (boardId, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS)\r\n\r\n    const res = store.get(boardId);\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event.target.result);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Get all boards\r\nexport const getAll = (onSuccess, onError) => {\r\n    const res =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS)\r\n    .getAll();\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event.target.result)    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Delete a board\r\nexport const remove = (id, onSuccess, onError) => {\r\n    const res =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS)\r\n    .delete(id);\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event)\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Update board title\r\nexport const updateTitle = (id, title, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS)\r\n\r\n    const res = store.get(id);\r\n\r\n    res.onsuccess = (event) => {\r\n        const board = event.target.result;\r\n        board.title = title;\r\n        update(store, board, onSuccess, onError);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Board update private helper method\r\nconst update = (store, board, onSuccess, onError) => {\r\n\r\n    const res = store.put(board);\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event)\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Update column in board \r\nexport const addColumn = (boardId, columnId, position, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS);\r\n\r\n    const res = store.get(boardId);\r\n\r\n    res.onsuccess = (event) => {\r\n        const board = event.target.result;\r\n\r\n        if(board.columns === undefined){\r\n            board.columns = [];\r\n        }\r\n\r\n        board.columns.splice(position, 0, columnId);\r\n        update(store, board, onSuccess, onError);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Delete column form board\r\nexport const removeColumn = (boardId, position, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS);\r\n\r\n    const res = store.get(boardId);\r\n\r\n    res.onsuccess = (event) => {\r\n        const board = event.target.result;\r\n\r\n        if(board.columns !== undefined){\r\n            board.columns.splice(position, 1);\r\n            update(store, board, onSuccess, onError);\r\n        } else {\r\n            if(onSuccess !== undefined)\r\n                onSuccess(event)\r\n        } \r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}","import { config } from '../../../setup/DBConfig';\r\nimport Database from '../../database';\r\nimport { addColumn as addColumnToBoard, getOne as getOneBoard } from '../board/queries'\r\n\r\nconst database = new Database();\r\n\r\n// Insert new column\r\nexport const insert = (boardId, column, onSuccess, onError) => {\r\n   const res =  database.instance.transaction([config.stores.COLUMNS], \"readwrite\")\r\n    .objectStore(config.stores.COLUMNS)\r\n    .add(column);\r\n\r\n    res.onsuccess = (event) => {\r\n        // Update the board with tha new column\r\n        addColumnToBoard(boardId, column.id, column.position);\r\n\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Get all columns\r\nexport const getAll = (boardId, onSuccess, onError) => {\r\n    // Get Columns that belongs to the boardId\r\n    const res =  getOneBoard(boardId, (result) => {\r\n        // Get all the column ids as array\r\n        console.log(JSON.stringify(result.columns));\r\n\r\n        const columnIds =  Object.Keys(result.columns);\r\n\r\n        const columns = [];\r\n        let index = 0;\r\n\r\n        // Use cursor to get all the column details\r\n        database.instance\r\n        .transaction(config.stores.COLUMNS)\r\n        .objectStore(config.stores.COLUMNS)\r\n        .openCursor().onsuccess = (event) => {\r\n\r\n            let cursor = event.target.result;\r\n            if(cursor) {\r\n                columns.splice(index, 0, cursor.value);\r\n                cursor.continue(columnIds[index])\r\n            } else {\r\n                if(onSuccess !== undefined)\r\n                    onSuccess(columns);\r\n            }\r\n\r\n        }\r\n    }, (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    });\r\n}\r\n\r\n// Delete a column\r\nexport const remove = (id, onSuccess, onError) => {\r\n    const res =  database.instance.transaction([config.stores.COLUMNS], \"readwrite\")\r\n    .objectStore(config.stores.COLUMNS)\r\n    .delete(id);\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event)\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Update board title\r\nexport const updateTitle = (id, title, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS)\r\n\r\n    const res = store.get(id);\r\n\r\n    res.onsuccess = (event) => {\r\n        const board = event.target.result;\r\n        board.title = title;\r\n        update(store, board, onSuccess, onError);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Board update private helper method\r\nconst update = (store, board, onSuccess, onError) => {\r\n\r\n    const res = store.put(board);\r\n\r\n    res.onsuccess = (event) => {\r\n        if(onSuccess !== undefined)\r\n            onSuccess(event)\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Update column in board \r\nexport const updateColumn = (boardId, columnId, position, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS);\r\n\r\n    const res = store.get(boardId);\r\n\r\n    res.onsuccess = (event) => {\r\n        const board = event.target.result;\r\n\r\n        if(board.columns === undefined){\r\n            board.columns = {};\r\n        }\r\n\r\n        board.columns[columnId] = position;\r\n        update(store, board, onSuccess, onError);\r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}\r\n\r\n// Delete column form board\r\nexport const removeColumn = (boardId, columnId, onSuccess, onError) => {\r\n    const store =  database.instance.transaction([config.stores.BOARDS], \"readwrite\")\r\n    .objectStore(config.stores.BOARDS);\r\n\r\n    const res = store.get(boardId);\r\n\r\n    res.onsuccess = (event) => {\r\n        const board = event.target.result;\r\n\r\n        if(board.columns !== undefined && columnId in board.columns){\r\n            delete board.columns[columnId]\r\n            update(store, board, onSuccess, onError);\r\n        } else {\r\n            if(onSuccess !== undefined)\r\n                onSuccess(event)\r\n        } \r\n    }\r\n\r\n    res.onerror = (event) => {\r\n        if(onError !== undefined)\r\n            onError(event);\r\n    }\r\n}","export function hashCode (str){\r\n    let hash = 0;\r\n    if (str.length == 0) return hash;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let char = str.charCodeAt(i);\r\n        hash = ((hash<<5)-hash)+char;\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return \"kk\"+(hash < 0 ? -hash : hash).toString()+new Date().getTime();\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App/App';\r\n\r\nimport {insert, getAll, remove, updateTitle, addColumn, removeColumn} from './database/modules/board/queries'\r\nimport {insert as columnInsert, getAll as columnGetAll} from './database/modules/column/queries'\r\nimport Board from './models/board';\r\nimport Column from './models/column'\r\nimport Database from './database/database';\r\nwindow.board = new Board(\"This is a new board title\");\r\nwindow.column = Column;\r\nwindow.boardInsert = insert;\r\nwindow.boardGetAll = getAll;\r\nwindow.boardRemove = remove;\r\nwindow.boardUpdateTitle = updateTitle;\r\nwindow.boardAddColumn = addColumn;\r\nwindow.boardRemoveColumn = removeColumn;\r\nwindow.columnInsert = columnInsert\r\nwindow.columnGetAll = columnGetAll\r\nwindow.db = new Database();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","import { hashCode } from \"../utils/helper\";\r\n\r\n\r\nexport default class Board {\r\n\r\n    /**\r\n     * \r\n     * @param {title of the board} title \r\n     * @param {columns in that board} columns \r\n     */\r\n    constructor(title, columns){\r\n        this.id = hashCode(title);\r\n        this.title = title;\r\n        this.columns = columns;\r\n        this.createdAt = new Date().getTime();\r\n        this.updatedAt = new Date().getTime();\r\n    }\r\n}","import { hashCode } from \"../utils/helper\";\r\n\r\n\r\nexport default class Column {\r\n    /**\r\n     * \r\n     * @param {title of the column} title \r\n     * @param {position of the column} position \r\n     * @param {cards column is holding} cards \r\n     */\r\n    constructor(title, position, cards) {\r\n        this.id = hashCode(title);\r\n        this.title = title;\r\n        this.position = position;\r\n        this.cards = cards;\r\n        this.createdAt = new Date().getTime();\r\n        this.updatedAt = new Date().getTime();\r\n    }\r\n}","export const config = {\r\n    databaseName: \"KKDatabase\",\r\n    databaseVersion: 1,\r\n    stores: {\r\n        BOARDS: \"boards\",\r\n        COLUMNS: \"columns\",\r\n        CARDS: \"cards\",\r\n    },\r\n}"],"sourceRoot":""}